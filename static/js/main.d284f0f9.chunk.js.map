{"version":3,"sources":["components/App.styled.jsx","components/Statistic/Statistic.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/App.jsx","index.js"],"names":["Container","styled","div","Button","button","Statistic","props","title","good","neutral","bad","total","positiveFeedbackPercentag","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","type","onClick","Section","this","feedbackOption","statistic","React","Component","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","console","log","prevGood","prevNeutral","prevBad","visible","showStatistic","toFixed","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PACaA,EAAYC,IAAOC,IAAV,0CAGTC,EAASF,IAAOG,OAAV,qG,OCWJC,EAZG,SAACC,GACf,IAAQC,EAA+DD,EAA/DC,MAAOC,EAAwDF,EAAxDE,KAAMC,EAAkDH,EAAlDG,QAASC,EAAyCJ,EAAzCI,IAAKC,EAAoCL,EAApCK,MAAMC,EAA8BN,EAA9BM,0BACzC,OAAO,gCACC,6BAAKL,IACL,uCAAUC,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,GAAwD,EAA/E,WCDOC,EARK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAMhC,OAAOC,OAAOC,KAAKH,GAASI,KALT,SAACC,GAAD,OACnB,cAAChB,EAAD,CAAqBiB,KAAK,SAASC,QAAS,kBAAMN,EAAgBI,IAAlE,SACGA,GADUA,O,8BCHIG,E,4JAEjB,WAAuD,IAAD,yDAAZC,KAAKjB,MAAvCkB,EAA8C,EAA9CA,eAAgBC,EAA8B,EAA9BA,UAAWlB,EAAmB,EAAnBA,MAC/B,OAAO,gCACH,6BAAKA,IACL,8BAAMiB,IACL,8BAAMC,W,GANkBC,IAAMC,WCK5B,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOpB,EAAP,KAAgBsB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOnB,EAAP,KAAYsB,EAAZ,KAmBMC,EAAqB,WAEzB,OADczB,EAAOC,EAAUC,GAkBjC,OAAQ,cAACV,EAAD,UAAW,cAAC,EAAD,CAASO,MAAM,wBAChCiB,eAAgB,cAAC,EAAD,CACdV,QAAS,CAAEN,OAAMC,UAASC,OAC1BK,gBAvCgB,SAACI,GAEnB,OADAe,QAAQC,IAAIhB,GACJA,GACN,IAAK,OACHW,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHL,GAAO,SAAAM,GAAO,OAAIA,EAAU,KAC5B,MACF,QACE,WA2BJb,UAXoB,WAAmC,IAAlCd,EAAiC,uDAAzBsB,IACzBM,GAAU,EAEd,OADc,IAAV5B,IAAe4B,GAAU,GACtBA,EAQIC,GACT,cAAC,EAAD,CACEjC,MAAM,aACNC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLE,0BAxBkC,WACtC,GAAIJ,EAAO,EAET,OAD+BA,EAAQyB,IAAwB,KAAKQ,QAAQ,GAsB/CC,GAC3B/B,MAAOsB,MAA2B,uDCrD1CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjB,EAAD,MAEFkB,SAASC,eAAe,W","file":"static/js/main.d284f0f9.chunk.js","sourcesContent":["import styled from '@emotion/styled'\nexport const Container = styled.div`\npadding:50px\n`;\nexport const Button = styled.button`\nmargin: 20px;\npadding: 10px;\npadding-right:20px;\npadding-left: 20px;\n`;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Statistic = (props) => {\n    const { title, good, neutral, bad, total,positiveFeedbackPercentag } = props\n    return <div>\n            <h2>{title}</h2>\n            <p>Good: {good}</p>\n            <p>Neutral: {neutral}</p>\n            <p>Bad: {bad}</p>\n            <p>Total: {total}</p>\n            <p>Positive feedback: {positiveFeedbackPercentag ? positiveFeedbackPercentag : 0}%</p>\n        </div>\n    }\n    \nexport default Statistic\n\nStatistic.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n};","import React from 'react';\nimport {Button} from \"../App.styled\";\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  const createButton = (option) => (\n    <Button key={option} type=\"button\" onClick={() => onLeaveFeedback(option)}>\n      {option}\n    </Button>)    \n    \n    return Object.keys(options).map(createButton);\n    }\n    export default FeedbackOptions","import React from 'react';\nexport default class Section extends React.Component {\n    \n    render({feedbackOption, statistic, title}=this.props) {\n        return <div>\n            <h2>{title}</h2>\n            <div>{feedbackOption}</div>\n            {<div>{statistic}</div>}\n        </div>\n    }\n}\n","import React, {useState} from 'react';\nimport { Container} from \"./App.styled\";\nimport Statistic from './Statistic/Statistic.jsx'; \nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions.jsx';\nimport Section from './Section/Section.jsx';\n\nexport default function Feedback() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = (option) => {\n    console.log(option)\n    switch (option) {\n      case 'good':\n        setGood(prevGood => prevGood + 1)\n        break;\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const total = good + neutral + bad;\n    return total;\n  }\n  \n  const countPositiveFeedbackPercentage = () => {\n    if (good > 0) {\n      const goodFeedbackPercent = (((good) / countTotalFeedback()) * 100).toFixed(0);\n      return goodFeedbackPercent\n    }\n  }\n  \n  const showStatistic = (total = countTotalFeedback()) => {\n    let visible = false\n    if (total !== 0) { visible = true }\n    return visible\n  }\n\n   \n  return (<Container><Section title=\"Please leave feadback\"\n    feedbackOption={<FeedbackOptions\n      options={{ good, neutral, bad }}\n      onLeaveFeedback={addFeedback} />}\n    statistic={showStatistic() ?\n      <Statistic\n        title=\"Statistics\"\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        positiveFeedbackPercentag={countPositiveFeedbackPercentage()}\n        total={countTotalFeedback()} /> : <h2>No feedback given</h2>}>\n  </Section></Container>\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Feedback from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Feedback />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}